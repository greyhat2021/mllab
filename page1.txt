import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error
df = pd.read_csv('student_scoree.csv') 
df.head()

X = df['Temp'].values.reshape(-1, 1) 
y = df['Ice Cream Sale'].values
plt.scatter(X, y, color='blue') 
plt.title('Temp vs Ice Cream Sale')

plt.xlabel('Temp') 
plt.ylabel('Ice Cream Sale') 
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
model = LinearRegression()
model.fit(X_train, y_train) 
y_pred = model.predict(X_test)
plt.scatter(X_test, y_test, color='blue', label='Actual') 
plt.plot(X_test, y_pred, color='red', linewidth=3, label='Predicted') 
plt.title('Simple Linear Regression Model')
plt.xlabel('Temp') 
plt.ylabel('Ice Cream Sale') 
plt.legend()
plt.show()
# new_hours = np.array([[12]]) # Predict for 12 hours of study predicted_score = model.predict(new_hours)
# print(f"Predicted Exam Score for 12 hours of study: {predicted_score[0]}")






import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
df = pd.read_csv('naive.csv')
label_encoder = LabelEncoder()
for column in ['Age', 'Income', 'Student', 'Credit']: 
	df[column] = label_encoder.fit_transform(df[column])
print("data \n",df)
imputer = SimpleImputer(strategy='constant', fill_value='missing') 
df_filled = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

X = df_filled.drop('Buy', axis=1) # Features 
y = df_filled['Buy'] # Target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train) 
X_test_scaled = scaler.transform(X_test)



from sklearn.naive_bayes import GaussianNB 
from sklearn.metrics import accuracy_score

gnb = GaussianNB() 
gnb.fit(X_train, y_train) 
y_pred = gnb.predict(X_test)
accuracy = accuracy_score(y_test, y_pred) 
print("Accuracy:", accuracy)

print("Classification Report \n",y_test, y_pred)