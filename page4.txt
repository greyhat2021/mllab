pip install numpy pandas matplotlib scikit-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Define the dataset
data = {
    'Temperature (°C)': [20, 25, 30, 33, 35, 38, 40, 47, 52],
    'Ice Cream Sales (Litres)': [17, 23, 28, 31, 38, 41, 53, 62, 90]
}

# Step 2: Create a DataFrame
df = pd.DataFrame(data)

# Step 3: Prepare the data for regression
X = df[['Temperature (°C)']]  # Feature: Temperature
y = df['Ice Cream Sales (Litres)']  # Target: Ice Cream Sales

# Step 4: Create a linear regression model
model = LinearRegression()

# Step 5: Fit the model
model.fit(X, y)

# Step 6: Get the regression parameters (intercept and slope)
intercept = model.intercept_
slope = model.coef_[0]

# Step 7: Make predictions
y_pred = model.predict(X)

# Step 8: Calculate performance metrics
mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)

# Step 9: Plot the data and the regression line
plt.scatter(X, y, color='blue', label='Data Points')
plt.plot(X, y_pred, color='red', label=f'Regression Line: y = {intercept:.2f} + {slope:.2f}x')
plt.title('Temperature vs Ice Cream Sales')
plt.xlabel('Temperature (°C)')
plt.ylabel('Ice Cream Sales (Litres)')
plt.legend()
plt.grid(True)
plt.show()

# Step 10: Display the results
print(f'Intercept (β0): {intercept:.2f}')
print(f'Slope (β1): {slope:.2f}')
print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'R-squared: {r2:.2f}')



pip install apyori


import pandas as pd
from apyori import apriori

dataset = pd.read_csv('Apriori.csv', header=None)
print(f"Dataset shape: {dataset.shape}")  

transactions = []
for i in range(0, dataset.shape[0]):
    transactions.append([str(dataset.values[i, j]) for j in range(1, 8) if str(dataset.values[i, j]) != 'nan'])

print("First transaction:", transactions[0])

rules = apriori(transactions, min_support=0.003, min_confidence=0.2, min_lift=3, min_length=2)

results = list(rules)
print(pd.DataFrame(results))
# # Convert the results into a readable format
# results_list = []
# for result in results:
#     for item in result.ordered_statistics:
#         result_dict = {
#             'Antecedents': list(item.items_base),
#             'Consequents': list(item.items_add),
#             'Support': result.support,
#             'Confidence': item.confidence,
#             'Lift': item.lift
#         }
#         results_list.append(result_dict)

# # Convert to a DataFrame for better visualization
# results_df = pd.DataFrame(results_list)

# # Step 5: Display the top 20 results
# print("Top 20 association rules:")
# print(results_df.head(20))
