import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load data from CSV
df = pd.read_csv('student_scores.csv')
print(df.head())  # Optional: Check the first few rows

# Separate features and target variable
X = df['hours_studied'].values.reshape(-1, 1)
y = df['exam_scores'].values

# Plot the data to visualize the relationship
plt.scatter(X, y, color='blue')
plt.title('Hours Studied vs Exam Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Exam Scores')
plt.show()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Plot actual vs predicted values
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')
plt.title('Simple Linear Regression Model')
plt.xlabel('Hours Studied')
plt.ylabel('Exam Scores')
plt.legend()
plt.show()

# Calculate and print Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Predict score for 12 hours of study
new_hours = np.array([[12]])
predicted_score = model.predict(new_hours)
print(f"Predicted Exam Score for 12 hours of study: {predicted_score[0]}")














import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load dataset from CSV
# Assuming the CSV file is named "diabetes.csv" with the provided structure
df = pd.read_csv("diabetes.csv")

# Display the first few rows to verify the data
print(df.head())

# Select features and target variable
feature_cols = ['Glucose', 'Blood Pressure', 'Skin Thickness', 'Insulin', 'BMI', 'Age']
X = df[feature_cols]  # Features
y = df['Outcome']     # Target

# Split dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Decision Tree Classifier
classifier = DecisionTreeClassifier(criterion="entropy", random_state=100)

# Train the model
classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Display confusion matrix and classification report
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

